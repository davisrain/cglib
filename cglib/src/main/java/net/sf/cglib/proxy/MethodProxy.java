/*
 * Copyright 2003,2004 The Apache Software Foundation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package net.sf.cglib.proxy;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

import net.sf.cglib.core.AbstractClassGenerator;
import net.sf.cglib.core.CodeGenerationException;
import net.sf.cglib.core.GeneratorStrategy;
import net.sf.cglib.core.NamingPolicy;
import net.sf.cglib.core.Signature;
import net.sf.cglib.reflect.FastClass;

/**
 * Classes generated by {@link Enhancer} pass this object to the
 * registered {@link MethodInterceptor} objects when an intercepted method is invoked. It can
 * be used to either invoke the original method, or call the same method on a different
 * object of the same type.
 * @version $Id: MethodProxy.java,v 1.16 2009/01/11 20:09:48 herbyderby Exp $
 */
public class MethodProxy {
    private Signature sig1;
    private Signature sig2;
    private CreateInfo createInfo;
    
    private final Object initLock = new Object();
    private volatile FastClassInfo fastClassInfo;
    
    /**
     * For internal use by {@link Enhancer} only; see the {@link net.sf.cglib.reflect.FastMethod} class
     * for similar functionality.
     */
    public static MethodProxy create(/*declaringClass*/ Class c1, /*thisClass*/ Class c2, /*descriptor*/ String desc, /*originalName*/ String name1, /*implName*/ String name2) {
        MethodProxy proxy = new MethodProxy();
        proxy.sig1 = new Signature(name1, desc);
        proxy.sig2 = new Signature(name2, desc);
        // 根据declaringClass 和 thisClass创建一个CreateInfo
        proxy.createInfo = new CreateInfo(c1, c2);
        return proxy;
    }

    private void init()
    {
        /* 
         * Using a volatile invariant allows us to initialize the FastClass and
         * method index pairs atomically.
         * 
         * Double-checked locking is safe with volatile in Java 5.  Before 1.5 this 
         * code could allow fastClassInfo to be instantiated more than once, which
         * appears to be benign.
         */
        if (fastClassInfo == null)
        {
            synchronized (initLock)
            {
                if (fastClassInfo == null)
                {
                    CreateInfo ci = createInfo;

                    // 实例化一个FastClassInfo
                    FastClassInfo fci = new FastClassInfo();
                    // 调用helper方法根据createInfo和createInfo持有的declaringClass创建出一个FastClass，
                    // 赋值给FastClassInfo的f1属性
                    fci.f1 = helper(ci, ci.c1);
                    // 调用helper方法根据createInfo和createInfo持有的thisClass创建出一个FastClass，
                    // 赋值给FastClassInfo的f2属性
                    // FastClass会持有一个实际的Class类型，然后将其声明的方法排序并按照switch的方式获取方法的index，
                    // 然后根据index快速找到对应的方法反射对象，然后调用
                    fci.f2 = helper(ci, ci.c2);
                    // 获取到原始方法签名对应的方法的index
                    fci.i1 = fci.f1.getIndex(sig1);
                    // 获取到impl方法签名对应的方法的index
                    fci.i2 = fci.f2.getIndex(sig2);
                    // 将fastClassInfo赋值给fci
                    fastClassInfo = fci;
                    // 然后将createInfo置为null
                    createInfo = null;
                }
            }
        }
    }

    private static class FastClassInfo
    {
        // 根据方法的declaringClass生成的FastClass
        FastClass f1;
        // 根据代理类thisClass生成的FastClass
        FastClass f2;
        // 原始方法签名在declaringClass中的index
        int i1;
        // CGLIB$originMethodName$index方法名对应的方法签名在thisClass中的index
        int i2;
    }

    private static class CreateInfo
    {
        Class c1;
        Class c2;
        NamingPolicy namingPolicy;
        GeneratorStrategy strategy;
        boolean attemptLoad;
        
        public CreateInfo(Class c1, Class c2)
        {
            // declaringClass
            this.c1 = c1;
            // thisClass
            this.c2 = c2;
            // 获取到正在创建代理类的Enhancer
            AbstractClassGenerator fromEnhancer = AbstractClassGenerator.getCurrent();
            // 如果Enhancer不为null的话，将其namingPolicy和generatorStrategy还有attemptLoad都赋值给CreateInfo中对应的属性
            if (fromEnhancer != null) {
                namingPolicy = fromEnhancer.getNamingPolicy();
                strategy = fromEnhancer.getStrategy();
                attemptLoad = fromEnhancer.getAttemptLoad();
            }
        }
    }

    private static FastClass helper(CreateInfo ci, Class type) {
        // 创建一个FastClass中的Generator，该Generator也继承于AbstractClassGenerator
        FastClass.Generator g = new FastClass.Generator();
        // 将type设置进去
        g.setType(type);
        // 将CreateInfo中的c2的类加载器设置进generator
        g.setClassLoader(ci.c2.getClassLoader());
        // 将namingPolicy和generatorStrategy以及attemptLoad都设置进去
        g.setNamingPolicy(ci.namingPolicy);
        g.setStrategy(ci.strategy);
        g.setAttemptLoad(ci.attemptLoad);
        // 然后调用其create方法，创建出一个FastClass类型出来
        return g.create();
    }

    private MethodProxy() {
    }

    /**
     * Return the signature of the proxied method.
     */
    public Signature getSignature() {
        return sig1;
    }

    /**
     * Return the name of the synthetic method created by CGLIB which is
     * used by {@link #invokeSuper} to invoke the superclass
     * (non-intercepted) method implementation. The parameter types are
     * the same as the proxied method.
     */
    public String getSuperName() {
        return sig2.getName();
    }

    /**
     * Return the {@link net.sf.cglib.reflect.FastClass} method index
     * for the method used by {@link #invokeSuper}. This index uniquely
     * identifies the method within the generated proxy, and therefore
     * can be useful to reference external metadata.
     * @see #getSuperName
     */
    public int getSuperIndex() {
        init();
        return fastClassInfo.i2;
    }

    // For testing
    FastClass getFastClass() {
      init();
      return fastClassInfo.f1;
    }

    // For testing
    FastClass getSuperFastClass() {
      init();
      return fastClassInfo.f2;
    }

    /**
     * Return the <code>MethodProxy</code> used when intercepting the method
     * matching the given signature.
     * @param type the class generated by Enhancer
     * @param sig the signature to match
     * @return the MethodProxy instance, or null if no applicable matching method is found
     * @throws IllegalArgumentException if the Class was not created by Enhancer or does not use a MethodInterceptor
     */
    public static MethodProxy find(Class type, Signature sig) {
        try {
            Method m = type.getDeclaredMethod(MethodInterceptorGenerator.FIND_PROXY_NAME,
                                              MethodInterceptorGenerator.FIND_PROXY_TYPES);
            return (MethodProxy)m.invoke(null, new Object[]{ sig });
        } catch (NoSuchMethodException e) {
            throw new IllegalArgumentException("Class " + type + " does not use a MethodInterceptor");
        } catch (IllegalAccessException e) {
            throw new CodeGenerationException(e);
        } catch (InvocationTargetException e) {
            throw new CodeGenerationException(e);
        }
    }

    /**
     * Invoke the original method, on a different object of the same type.
     * @param obj the compatible object; recursion will result if you use the object passed as the first
     * argument to the MethodInterceptor (usually not what you want)
     * @param args the arguments passed to the intercepted method; you may substitute a different
     * argument array as long as the types are compatible
     * @see MethodInterceptor#intercept
     * @throws Throwable the bare exceptions thrown by the called method are passed through
     * without wrapping in an <code>InvocationTargetException</code>
     */
    public Object invoke(Object obj, Object[] args) throws Throwable {
        try {
            init();
            // 获取到fastClassInfo
            FastClassInfo fci = fastClassInfo;
            // 反射调用declaringClass中声明的方法的反射对象，如果obj是代理对象并且重写了该方法的话，那么会动态分派到代理对象上。
            // 如果不是代理对象，那么会调用被代理对象的方法。即是根据obj这个对象的实际类型来进行动态分派的。
            // 因此invoke方法即可以传入proxy代理对象，也可以传入target被代理对象，因此这两个对象中都有对应签名的方法，会根据实际传入的对象动态分派。
            return fci.f1.invoke(fci.i1, obj, args);
        } catch (InvocationTargetException e) {
            throw e.getTargetException();
        } catch (IllegalArgumentException e) {
            if (fastClassInfo.i1 < 0)
                throw new IllegalArgumentException("Protected method: " + sig1);
            throw e;
        }
    }

    /**
     * Invoke the original (super) method on the specified object.
     * @param obj the enhanced object, must be the object passed as the first
     * argument to the MethodInterceptor
     * @param args the arguments passed to the intercepted method; you may substitute a different
     * argument array as long as the types are compatible
     * @see MethodInterceptor#intercept
     * @throws Throwable the bare exceptions thrown by the called method are passed through
     * without wrapping in an <code>InvocationTargetException</code>
     */
    public Object invokeSuper(Object obj, Object[] args) throws Throwable {
        try {
            init();
            // 获取到fastClassInfo
            FastClassInfo fci = fastClassInfo;
            // 然后调用代理对象的impl方法，即代理对象的CGLIB$ + originalMethodName + $ + index方法，该方法的逻辑就是invokespecial，
            // 调用父类的原始方法名和相同参数类型对应的方法。
            // 因此invokeSuper只能传入proxy代理对象，如果传入target被代理对象会报错，因为target对象中没有这种签名的方法
            return fci.f2.invoke(fci.i2, obj, args);
        } catch (InvocationTargetException e) {
            throw e.getTargetException();
        }
    }
}
